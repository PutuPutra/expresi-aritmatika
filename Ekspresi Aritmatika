#include <bits/stdc++.h>
using namespace std;

long unsigned int i;

bool isopr(char ch){
    if(ch == '+' || ch == '-' || ch =='*' || ch == '/' || ch == '%'){
    	return true;
	}else{
	   return false;	
	} 	
}

double calculateWithSign(double a, double b, char opr){
    switch(opr){
        case '+': 
			return a+b;
        case '-': 
			return a-b;
        case '*': 
			return a*b;
        case '/': 
			return a / b;
    }
    return 0;
}

int precedence(char ch){
    if ( ch == '+'|| ch == '-'){
    	return 1;	
	} 
    if ( ch == '*' || ch =='/' || ch =='%'){
    	return 2;	
	}
    return 0;
}

void calculate(string str){
    stack <double> postfix;
    stack <char> st;
    
    for(i=0; i<str.length(); i++){
        if(isdigit(str[i])){
            int value =0;
            while(i<str.length() && isdigit(str[i])){
                value = (value*10) + (str[i] - '0');
                i++;
            }
            i--;
            postfix.push(value);
        }
        
        else if(str[i] == '('){
        	st.push(str[i]);
		}
            
        else if(str[i] == ')'){
            while(!st.empty() && st.top() != '('){
                if(st.top() == '%'){
                    int value2 = postfix.top(); postfix.pop();
                    int value1 = postfix.top(); postfix.pop();
                    st.pop();
                    postfix.push(value1%value2);
                    
                }else {
                    double value2 = postfix.top(); postfix.pop();
                    double value1 = postfix.top(); postfix.pop();
                    char opr = st.top(); st.pop();
                    postfix.push(calculateWithSign(value1, value2, opr));
                }
            }
            if(!st.empty()){
            	st.pop();
			}
               
        }else {
            if(str[i] == '-'){
                if(i==0){
                    if(isdigit(str[i+1])){
                        i++;
                        int value=0;
                        while(i<str.length() && isdigit(str[i])){
                            value = (value*10) + (str[i] - '0');
                            i++;
                        }
                        i--;
                        postfix.push(value*-1);
                    } else {
                        postfix.push(-1);
                        st.push('*');
                    }
                    
                } else {
                    while(!st.empty() && precedence(st.top()) >= precedence(str[i]) && !isopr(str[i-1])){
                        if(st.top() == '%'){
                            int value2 = postfix.top(); postfix.pop();
                            int value1 = postfix.top(); postfix.pop();
                            st.pop();
                            postfix.push(value1%value2);
                        } else {
                            double value2 = postfix.top(); postfix.pop();
                            double value1 = postfix.top(); postfix.pop();
                            char opr = st.top(); st.pop();
                            postfix.push(calculateWithSign(value1, value2, opr));
                        }
                    }
                    if((isdigit(str[i+1]) || str[i+1]=='(') && (isdigit(str[i-1]) || str[i-1]==')'))
                        st.push(str[i]);
                    else{
                        postfix.push(-1);
                        st.push('*');
                    }
                } 
            } else {
                while(!st.empty() && precedence(st.top()) >= precedence(str[i])){
                    if(st.top() == '%'){
                        int value2 = postfix.top(); postfix.pop();
                        int value1 = postfix.top(); postfix.pop();
                        st.pop();
                        postfix.push(value1%value2);
                    } else {
                        double value2 = postfix.top(); postfix.pop();
                        double value1 = postfix.top(); postfix.pop();
                        char opr = st.top(); st.pop();
                        postfix.push(calculateWithSign(value1, value2, opr));
                    }
                }
                st.push(str[i]);
            }
        }
    }
    while(!st.empty()){
        if(st.top() == '%'){
            int value2 = postfix.top(); postfix.pop();
            int value1 = postfix.top(); postfix.pop();
            st.pop();
            postfix.push(value1%value2);
        } else {
            double value2 = postfix.top(); postfix.pop();
            double value1 = postfix.top(); postfix.pop();
            char opr = st.top(); st.pop();
            postfix.push(calculateWithSign(value1, value2, opr));
        }
    }
    cout << postfix.top() << endl;
}

int main(){
    string exp; 
	getline(cin, exp);
    string buff="";
    
    for(i=0; i<exp.length(); i++){
        if(exp[i]==' ')
            continue;
        else
            buff+=exp[i];
    }
    calculate(buff);
        
    return 0;
}
